plugins {
    id "com.diffplug.eclipse.apt" version "3.22.0"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
}

version "0.1"
group "example.micronaut"

repositories {
    jcenter()
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    annotationProcessor(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    annotationProcessor("io.micronaut:micronaut-inject-java")

    //tag::micronaut-graal[]
    annotationProcessor("io.micronaut:micronaut-graal")
    //end::micronaut-graal[]
    //tag::validator[]
    annotationProcessor("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-validation")
    //end::validator[]
    compileOnly(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    //tag::svm[]
    compileOnly("org.graalvm.nativeimage:svm")
    //end::svm[]
    implementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")

    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")

    //tag::spring[]
    implementation("io.micronaut.sql:micronaut-hibernate-jpa-spring")
    //end::spring[]

    //tag::jpa[]
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    runtimeOnly("com.h2database:h2")
    //end::jpa[]

    runtimeOnly("ch.qos.logback:logback-classic")

    testAnnotationProcessor(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testAnnotationProcessor("io.micronaut:micronaut-inject-java")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

test.classpath += configurations.developmentOnly

mainClassName = "example.micronaut.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
    targetCompatibility = JavaVersion.toVersion('1.8')
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
        '-parameters',
        // enables incremental compilation
        '-Amicronaut.processing.incremental=true',
        '-Amicronaut.processing.annotations=example.micronaut.*',
        "-Amicronaut.processing.group=$project.group",
        "-Amicronaut.processing.module=$project.name",
    ])
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart':'true',
            'micronaut.io.watch.enabled':'true',
            "micronaut.io.watch.paths":"src/main"
        )
    }
}

apply from: "${project.projectDir}/../gradle/testVerbose.gradle"
